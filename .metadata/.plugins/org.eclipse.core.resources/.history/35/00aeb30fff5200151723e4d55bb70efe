package eng;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.regex.Pattern;

/**
 * A TokenIdConverter convert the tokens in a single file or the files in a
 * directory to their ids which are separated by a delimiter "|" which stand for
 * the separators in the original text, e.g. commas, newline characters etc., to
 * identify segments in the resulted id sequence; the id of a token is the line
 * number whose line begins with the token in the token list file, with the line
 * number counted from zero.
 * <p>
 * 
 * Because some words in the files can be missing from the token list,
 * extracting all separators in a file may result in some empty segments. This
 * situation is considered and is handled by automatically removing these empty
 * segments.
 * <p>
 * 
 * When the input is a single text file, the output will also be a text file. If
 * the specified output is an existing directory, then an error will occur;
 * however, when the input is a directory consisting of multiple text files, the
 * specified output stands for a directory to take in the resulted files. For
 * each token file in the input directory, a file with the same filename will be
 * created in the output directory to represent the resulted id sequence by
 * processing the token file.
 * 
 * @author Youwei Lu
 */
public class TokenIdConverter {

	/**
	 * The filename of the token list file
	 */
	private String tokenListFile;
	/**
	 * The map between the token and its id. A token's id is the line number
	 * whose corresponding line begins with the token
	 */
	private Map<String, Integer> tokenIdMap;
	/**
	 * A regular expression for matching the separators in files
	 */
	private String separatorPattern;

	public TokenIdConverter(String tokenListFile, String separatorPattern) {
		this.tokenListFile = tokenListFile;
		this.separatorPattern = separatorPattern;
	}

	public loadTokenList() {
		
	}
	/**
	 * Read tokens from an input stream, and convert the tokens to ids in the
	 * token list, writing to the output stream. If separators are detected,
	 * then insert a delimiter "|" in the id sequence to denote segments.
	 */
	private void readTokenListToIdMap(BufferedReader read, BufferedWriter out) throws IOException {
		String line, tokens[], token;
		int prevId = -1, id = -1, i, j;
		while ((line = read.readLine()) != null) {
			tokens = line.split("\\s+");
			for (i = 0; i < tokens.length; i++) {
				token = tokens[i];
				j = i + 1;
				if (Pattern.matches(seperatorPattern, token)) {
					/* if the current token is a separator, it is written to the
					 * output only when it is between two ids
					 */
					for (; j < tokens.length; j++) {
						if (tokenIdMap.containsKey(tokens[j])) {
							id = tokenIdMap.get(tokens[j]);
							break;
						}
					}
					if (i > 0 && j > 0 && j < tokens.length) {
						if (prevId > 0) {
							out.write("| " + id + " ");
						} else {
							out.write(id + " ");
						}
					}
					i = j;
					prevId = id;
				} else if (tokenIdMap.containsKey(token)) {
					id = tokenIdMap.get(token);
					if(prevId > 0) {
						out.write("| ");
					}
					out.write(id + " ");
					prevId = id;
				}
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
